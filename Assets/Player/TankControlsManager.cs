//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player/TankControlsManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankControlsManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankControlsManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TankControlsManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""94e1b290-cbcc-487e-b15d-13d73016f81b"",
            ""actions"": [
                {
                    ""name"": ""TankMovement"",
                    ""type"": ""Value"",
                    ""id"": ""f5cb1aa3-9c32-454e-9838-5f2a82431951"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurretRotation"",
                    ""type"": ""Value"",
                    ""id"": ""70bfa470-f783-4399-bdb1-145ac67e859a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurretShoot"",
                    ""type"": ""Button"",
                    ""id"": ""f01043eb-d195-41c2-bace-64956ea1bb53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f2367598-80ee-4761-9dd6-51eda5097ee6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ca404d9b-0f81-4850-9ce2-0851a97e269c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6fb92bf9-a02e-4e38-bb1c-8e327624d534"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4bb0e97-e445-4d0f-a614-44b494b2aa30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c935b0e6-02a6-4221-a623-c90b92ee2663"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TankMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""fa69f423-4cbf-411b-a3ff-c17bbcaa89f5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurretRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f68dd9db-80a0-4f99-98d8-069911bd8de7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurretRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ffdd6b17-c8b1-456e-aedb-d5760097e175"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurretRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8df26dd5-0069-4f83-a360-3fa89e572447"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurretShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_TankMovement = m_Player.FindAction("TankMovement", throwIfNotFound: true);
        m_Player_TurretRotation = m_Player.FindAction("TurretRotation", throwIfNotFound: true);
        m_Player_TurretShoot = m_Player.FindAction("TurretShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_TankMovement;
    private readonly InputAction m_Player_TurretRotation;
    private readonly InputAction m_Player_TurretShoot;
    public struct PlayerActions
    {
        private @TankControlsManager m_Wrapper;
        public PlayerActions(@TankControlsManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @TankMovement => m_Wrapper.m_Player_TankMovement;
        public InputAction @TurretRotation => m_Wrapper.m_Player_TurretRotation;
        public InputAction @TurretShoot => m_Wrapper.m_Player_TurretShoot;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @TankMovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTankMovement;
                @TankMovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTankMovement;
                @TankMovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTankMovement;
                @TurretRotation.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurretRotation;
                @TurretRotation.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurretRotation;
                @TurretRotation.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurretRotation;
                @TurretShoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurretShoot;
                @TurretShoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurretShoot;
                @TurretShoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTurretShoot;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TankMovement.started += instance.OnTankMovement;
                @TankMovement.performed += instance.OnTankMovement;
                @TankMovement.canceled += instance.OnTankMovement;
                @TurretRotation.started += instance.OnTurretRotation;
                @TurretRotation.performed += instance.OnTurretRotation;
                @TurretRotation.canceled += instance.OnTurretRotation;
                @TurretShoot.started += instance.OnTurretShoot;
                @TurretShoot.performed += instance.OnTurretShoot;
                @TurretShoot.canceled += instance.OnTurretShoot;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnTankMovement(InputAction.CallbackContext context);
        void OnTurretRotation(InputAction.CallbackContext context);
        void OnTurretShoot(InputAction.CallbackContext context);
    }
}
